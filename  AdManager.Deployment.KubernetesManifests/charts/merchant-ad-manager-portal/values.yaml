replicaCount: 1

image:
  repository: my-docker-registry/merchant-ad-manager-portal
  pullPolicy: IfNotPresent
  # Overridden by CI/CD with specific build tag
  tag: "latest"

imagePullSecrets: []
# - name: my-image-pull-secret

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podSecurityContext: {}
  # fsGroup: 1001 # If using nginx non-root user

securityContext: {} # For the container
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1001 # Nginx common non-root user

service:
  type: ClusterIP
  port: 80 # Exposed by the service
  targetPort: http # Port on the pod (e.g., 80 for Nginx, 3000 for Node SSR)

ingress:
  enabled: true # Frontend is typically exposed via Ingress
  className: "" # e.g., "alb" for AWS Load Balancer Controller or "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: portal.admanager.local
      paths:
        - path: / # Frontend usually serves from root
          pathType: Prefix # Or ImplementationSpecific
  tls: []
  #  - secretName: portal-tls
  #    hosts:
  #      - portal.admanager.local

resources: {}
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false # Typically for stateless frontends, scaling might be less dynamic initially
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70

# Liveness, Readiness Probes
livenessProbe:
  httpGet:
    path: / # Or a specific health check endpoint like /healthz or /index.html
    port: http
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 3
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: / # Or a specific health check endpoint
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3
startupProbe: # Usually not needed for simple static serving frontends
  enabled: false
  httpGet:
    path: /
    port: http
  failureThreshold: 30
  periodSeconds: 10
  timeoutSeconds: 3

# ConfigMap data for frontend runtime configuration (e.g., API URLs, feature flags)
# These can be injected into index.html, or used by entrypoint script, or by Nginx config
configData: {}
  # API_GATEWAY_URL: "https://api.admanager.local/v1"
  # FEATURE_FLAG_NEW_DASHBOARD: "true"
  # NGINX_CONFIG_SNIPPET: |
  #   location /api/ {
  #     proxy_pass http://backend-service-cluster-ip:port/;
  #   }

# Secret keys for frontend (less common, e.g., API key for a third-party analytics service)
# secretKeys: []
  # - ANALYTICS_API_KEY

# Environment variables to be set in the container (e.g., for Node.js SSR or build-time substitution)
env: []
  # - name: API_URL
  #   valueFrom:
  #     configMapKeyRef:
  #       name: {{ include "merchant-ad-manager-portal.fullname" . }}-config
  #       key: API_GATEWAY_URL

featureToggles:
  enableIstioIntegration: false
  enablePrometheusServiceMonitors: false # Less common for static frontends, but possible for SSR Node apps
  # deployDebugSidecarsInDev: false

nodeSelector: {}
tolerations: []
affinity: {}