{{- if or .Values.secretKeys .Values.secretData }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "campaign-management-service.fullname" . }}-secret
  labels:
    {{- include "campaign-management-service.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
type: Opaque
# NOTE: Actual secret values are NOT stored here.
# This file defines the structure. Values are injected externally.
data:
  {{- if .Values.secretKeys }}
  {{- range .Values.secretKeys }}
  {{ . }}: {{ "" | b64enc | quote }} # Placeholder: empty string, base64 encoded
  {{- end }}
  {{- end }}
  {{- if .Values.secretData }}
  {{- range $key, $value := .Values.secretData }}
  # Expects $value to be a placeholder string like "PLACEHOLDER_FOR_CI_CD_VALUE"
  # CI/CD should replace this placeholder with the actual base64 encoded secret.
  # If $value is already base64, then just '{{ $value | quote }}' might be enough,
  # but helm-secrets or similar tools often handle the encoding.
  # For safety, let's assume value is plain text and needs b64 encoding,
  # or it's a specific instruction to CI/CD.
  # A common pattern is to let helm --set or values files provide the base64 encoded string directly.
  # So, if .Values.secretData.API_KEY is "SGVsbG8=", then that's what's used.
  {{ $key }}: {{ $value | b64enc | quote }} # If value is plain text, b64enc it. If already b64, this might double-encode if not careful.
                                     # Best practice: external system provides the final base64 encoded string.
                                     # This template assumes the value in .Values.secretData is the *plain text* value
                                     # to be encoded, or a placeholder for an already encoded value.
                                     # For CI/CD, usually the value injected via --set or values file is already b64 encoded.
                                     # If so, use: {{ $key }}: {{ $value | quote }}
                                     # Let's stick to the SDS example: if values are passed, they are b64 encoded.
                                     # The value itself *IS* the base64 string.
  # {{ $key }}: {{ $value | quote }} # Use this if .Values.secretData.KEY already contains the b64 encoded string.
  {{- end }}
  {{- end }}
{{- end }}