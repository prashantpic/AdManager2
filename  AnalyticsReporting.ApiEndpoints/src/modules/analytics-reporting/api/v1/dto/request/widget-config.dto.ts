import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { Type } from 'class-transformer';
import {
  IsArray,
  IsEnum,
  IsInt,
  IsNotEmpty,
  IsObject,
  IsOptional,
  IsString,
  IsUUID,
  Min,
  ValidateNested,
  ArrayMinSize,
} from 'class-validator';
import { MetricName } from '../../constants/metric-names.enum';

/**
 * Data Transfer Object representing the size and position for a single widget.
 */
export class WidgetSizePositionDto {
  @IsInt()
  @Min(1)
  @ApiProperty({ description: 'Width of the widget in grid units.', example: 4 })
  w: number;

  @IsInt()
  @Min(1)
  @ApiProperty({ description: 'Height of the widget in grid units.', example: 2 })
  h: number;

  @IsInt()
  @Min(0)
  @ApiProperty({ description: 'X position of the widget on the grid.', example: 0 })
  x: number;

  @IsInt()
  @Min(0)
  @ApiProperty({ description: 'Y position of the widget on the grid.', example: 0 })
  y: number;
}

/**
 * Data Transfer Object representing the configuration for a single widget on a customizable dashboard.
 * @summary Defines the structure for configuring individual widgets on a custom dashboard.
 */
export class WidgetConfigDto {
  @IsUUID('4')
  @IsOptional()
  @ApiPropertyOptional({
    description: 'Unique ID for the widget, generated by system if not provided for a new widget.',
    format: 'uuid',
    example: 'a1b2c3d4-e5f6-7890-1234-567890abcdef',
  })
  widgetId?: string;

  @IsString()
  @IsNotEmpty()
  @ApiProperty({
    example: 'line-chart',
    description: 'Type of widget (e.g., line-chart, bar-chart, kpi-card, table)',
  })
  widgetType: string;

  @IsString()
  @IsOptional()
  @ApiPropertyOptional({ example: 'Spend Over Time', description: 'Title of the widget' })
  title?: string;

  @IsArray()
  @IsEnum(MetricName, { each: true })
  @ArrayMinSize(1)
  @ApiProperty({
    enum: MetricName,
    isArray: true,
    example: [MetricName.SPEND, MetricName.ROAS],
    description: 'Metrics to display in the widget',
  })
  metrics: MetricName[];

  @IsArray()
  @IsString({ each: true })
  @IsOptional()
  @ApiPropertyOptional({
    example: ['date', 'campaignName'],
    description: 'Dimensions to group or break down data by',
    type: [String],
  })
  dimensions?: string[];

  @IsObject()
  @IsOptional()
  @ApiPropertyOptional({
    description: 'JSON object for widget-specific filters, e.g., { "campaignId": "uuid-goes-here" }',
    example: { campaignStatus: 'active' },
  })
  filters?: any;

  @IsObject()
  @IsOptional()
  @ApiPropertyOptional({
    description: 'Specific chart rendering options (e.g., colors, axis labels)',
    example: { "showLegend": true, "colorScheme": "vivid" },
  })
  chartOptions?: any;

  @IsObject()
  @ValidateNested()
  @Type(() => WidgetSizePositionDto)
  @IsOptional()
  @ApiPropertyOptional({
    description: 'Widget size and position on the dashboard grid',
    type: WidgetSizePositionDto,
  })
  size?: WidgetSizePositionDto;
}