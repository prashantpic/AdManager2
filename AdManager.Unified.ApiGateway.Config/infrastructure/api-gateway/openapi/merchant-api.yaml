openapi: 3.1.0
info:
  title: Ad Manager Merchant API
  version: v1
  description: API for Merchant Portal functionalities, including campaign management, product catalogs, and analytics.
  contact:
    name: Ad Manager Support
    url: https://support.admanager.example.com
    email: support@admanager.example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://{stage}.api.admanager.example.com/merchant/v1
    variables:
      stage:
        default: dev
        description: The deployment stage (e.g., dev, prod).
  - url: http://localhost:3000/merchant/v1 # For local development if proxied
    description: Local development server

tags:
  - name: Campaigns
    description: Operations related to advertising campaigns.
  - name: Product Catalogs
    description: Management of product catalogs for advertising.
  - name: Analytics
    description: Access to performance analytics and reports.

paths:
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List all campaigns
      description: Retrieves a paginated list of campaigns for the authenticated merchant.
      operationId: listCampaigns
      parameters:
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of campaigns per page.
          required: false
          schema:
            type: integer
            default: 20
        - $ref: './shared-components.yaml#/components/parameters/CorrelationIdHeader'
      security:
        - JWTBearerAuth: []
      responses:
        '200':
          description: A paginated list of campaigns.
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: './shared-components.yaml#/components/schemas/Campaign'
                  pageInfo:
                    $ref: './shared-components.yaml#/components/schemas/PaginationInfo'
        '401':
          $ref: './shared-components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './shared-components.yaml#/components/responses/ForbiddenError'
        '500':
          $ref: './shared-components.yaml#/components/responses/InternalServerError'
    post:
      tags:
        - Campaigns
      summary: Create a new campaign
      description: Creates a new advertising campaign.
      operationId: createCampaign
      parameters:
        - $ref: './shared-components.yaml#/components/parameters/CorrelationIdHeader'
      requestBody:
        description: Campaign object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: './shared-components.yaml#/components/schemas/Campaign' # Assuming a CampaignInput schema might be different
      security:
        - JWTBearerAuth: []
      responses:
        '201':
          description: Campaign created successfully.
          content:
            application/json:
              schema:
                $ref: './shared-components.yaml#/components/schemas/Campaign'
        '400':
          $ref: './shared-components.yaml#/components/responses/BadRequestError'
        '401':
          $ref: './shared-components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './shared-components.yaml#/components/responses/ForbiddenError'
        '500':
          $ref: './shared-components.yaml#/components/responses/InternalServerError'

  /campaigns/{campaignId}:
    get:
      tags:
        - Campaigns
      summary: Get campaign by ID
      description: Retrieves a specific campaign by its unique identifier.
      operationId: getCampaignById
      parameters:
        - name: campaignId
          in: path
          description: Unique identifier of the campaign.
          required: true
          schema:
            type: string
            format: uuid
        - $ref: './shared-components.yaml#/components/parameters/CorrelationIdHeader'
      security:
        - JWTBearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './shared-components.yaml#/components/schemas/Campaign'
        '401':
          $ref: './shared-components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './shared-components.yaml#/components/responses/ForbiddenError'
        '404':
          $ref: './shared-components.yaml#/components/responses/NotFoundError'
        '500':
          $ref: './shared-components.yaml#/components/responses/InternalServerError'
    put:
      tags:
        - Campaigns
      summary: Update an existing campaign
      description: Updates an existing campaign by its ID.
      operationId: updateCampaign
      parameters:
        - name: campaignId
          in: path
          description: Unique identifier of the campaign to update.
          required: true
          schema:
            type: string
            format: uuid
        - $ref: './shared-components.yaml#/components/parameters/CorrelationIdHeader'
      requestBody:
        description: Campaign object with updated fields.
        required: true
        content:
          application/json:
            schema:
              $ref: './shared-components.yaml#/components/schemas/Campaign' # Assuming CampaignUpdate schema might exist
      security:
        - JWTBearerAuth: []
      responses:
        '200':
          description: Campaign updated successfully.
          content:
            application/json:
              schema:
                $ref: './shared-components.yaml#/components/schemas/Campaign'
        '400':
          $ref: './shared-components.yaml#/components/responses/BadRequestError'
        '401':
          $ref: './shared-components.yaml#/components/responses/UnauthorizedError'
        '403':
          $ref: './shared-components.yaml#/components/responses/ForbiddenError'
        '404':
          $ref: './shared-components.yaml#/components/responses/NotFoundError'
        '500':
          $ref: './shared-components.yaml#/components/responses/InternalServerError'

  /product-catalogs:
    get:
      tags:
        - Product Catalogs
      summary: List all product catalogs
      operationId: listProductCatalogs
      # Placeholder - full definition similar to /campaigns GET
      responses:
        '200':
          description: A list of product catalogs.
        '401':
          $ref: './shared-components.yaml#/components/responses/UnauthorizedError'
      security:
        - JWTBearerAuth: []

  /product-catalogs/{catalogId}:
    get:
      tags:
        - Product Catalogs
      summary: Get product catalog by ID
      operationId: getProductCatalogById
      parameters:
        - name: catalogId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      # Placeholder - full definition similar to /campaigns/{campaignId} GET
      responses:
        '200':
          description: Details of a specific product catalog.
        '401':
          $ref: './shared-components.yaml#/components/responses/UnauthorizedError'
      security:
        - JWTBearerAuth: []

  /analytics/performance:
    get:
      tags:
        - Analytics
      summary: Get performance analytics
      operationId: getPerformanceAnalytics
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      # Placeholder - full definition
      responses:
        '200':
          description: Performance analytics data.
        '401':
          $ref: './shared-components.yaml#/components/responses/UnauthorizedError'
      security:
        - JWTBearerAuth: []

components:
  schemas:
    # Merchant API specific schemas can be defined here if not in shared-components.yaml
    # Example:
    # MerchantCampaignInput:
    #   allOf:
    #     - $ref: './shared-components.yaml#/components/schemas/Campaign'
    #     - type: object
    #       properties:
    #         merchantSpecificField:
    #           type: string
    ErrorResponse:
      $ref: './shared-components.yaml#/components/schemas/ErrorResponse'
    PaginationInfo:
      $ref: './shared-components.yaml#/components/schemas/PaginationInfo'
    Campaign:
      $ref: './shared-components.yaml#/components/schemas/Campaign'

  securitySchemes:
    JWTBearerAuth:
      $ref: './shared-components.yaml#/components/securitySchemes/JWTBearerAuth'