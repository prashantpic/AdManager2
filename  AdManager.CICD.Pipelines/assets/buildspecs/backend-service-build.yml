version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: 20 # Or as per project requirements
    commands:
      - echo Installing dependencies...
      - npm ci # Or yarn install
  pre_build:
    commands:
      - echo Running linters...
      - npm run lint # Or yarn lint
  build:
    commands:
      - echo Running tests...
      - npm run test # For unit & integration tests, ensure this script generates reports if used by 'reports' section
      - echo Building service...
      - npm run build
  post_build:
    commands:
      - echo Packaging artifacts...
      # This step depends on how deployment artifact is structured for ECS.
      # It should include the built application (e.g., dist/),
      # necessary runtime files (e.g., package.json, node_modules if not bundling them),
      # and deployment specifications (appspec.yml, taskdef.json - taskdef.json is often generated by a build step).
      - mkdir artifact_output
      - cp -R dist/* artifact_output/
      - if [ -f package.json ]; then cp package.json artifact_output/; fi
      - if [ -f package-lock.json ]; then cp package-lock.json artifact_output/; fi # or yarn.lock
      # If node_modules are required for deployment (e.g. not a self-contained executable)
      # - if [ -d node_modules ]; then cp -R node_modules artifact_output/; fi # This can make artifacts large; consider bundling or layers.
      - if [ -f appspec.yml ]; then cp appspec.yml artifact_output/; fi
      # taskdef.json is typically generated dynamically in a CodeBuild step before deployment,
      # using the ECR image URI of the newly built image.
      # If a static template is used and only image URI is substituted, it can be copied here.
      # - if [ -f taskdef.json ]; then cp taskdef.json artifact_output/; fi
      - if [ -f Procfile ]; then cp Procfile artifact_output/; fi # If using Procfile for ECS startup

artifacts:
  files:
    - '**/*'
  base-directory: 'artifact_output'
  discard-paths: no
  # name: BuildOutputArtifact # Optional: can be specified in CDK

reports: # For CodeBuild test reporting
  TestReportGroup: # This name should match a cdk.aws_codebuild.ReportGroup resource name or ARN
    files:
      - 'junit.xml' # Path to JUnit XML report relative to base-directory of artifacts or source
    file-format: 'JUNITXML'
    base-directory: 'test-results' # Directory where test reports are generated relative to source root